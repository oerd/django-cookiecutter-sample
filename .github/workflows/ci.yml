name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: [ "master", "main" ]
    paths-ignore: [ "docs/**" ]

  push:
    branches: [ "master", "main" ]
    paths-ignore: [ "docs/**" ]


jobs:
  linter:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Run all pre-commit hooks on all the files.
      # Getting only staged files can be tricky in case a new PR is opened
      # since the action is run on a branch in detached head state
      - name: Install and Run Pre-commit 
        uses: pre-commit/action@v2.0.0

  # With no caching at all the entire ci process takes 4m 30s to complete!
  pytest:
    runs-on: ubuntu-latest
    needs: linter
    if: always()

    services:
      postgres:
        image: postgres:12
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres

    env:
      # postgres://user:password@host:port/database
      DATABASE_URL: "postgres://postgres:postgres@localhost:5432/postgres"

    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Get pip cache dir
        id: pip-cache-location
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache pip Project Dependencies
        uses: actions/cache@v2
        with:
          # Get the location of pip cache dir
          path: ${{ steps.pip-cache-location.outputs.dir }}
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('**/local.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/local.txt

      - name: Run tests with coverage
        run:  coverage run manage.py test
      
      - name: Run coverage report
        run:  coverage report
      
      - name: Generate coverage xml
        run:  coverage xml -i

      - name: (Debug) Show structure of files
        run: ls -R

      - name: Upload python coverage report
        uses: actions/upload-artifact@v2
        with:
          name: py-coverage-${{ github.sha }}
          path: coverage.xml
          retention-days: 1
  
  # Run nodejs tests
  nodetest:
    runs-on: ubuntu-latest
    env:
      NEXT_TELEMETRY_DISABLED: 1
    defaults:
      run:
        working-directory: nextjs_frontend
    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install node deps
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Upload nextjs coverage report
        uses: actions/upload-artifact@v2
        with:
          name: js-coverage-${{ github.sha }}
          path: nextjs_frontend/coverage
      

  # Analyze data on sonarcloud.io
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    if: always()
    needs: [
      pytest,
      nodetest
    ]
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download python coverage report
        id: py-coverage-download
        uses: actions/download-artifact@v2
        with:
          name: py-coverage-${{ github.sha }}
          # path: coverage.xml
      
      - name: Download nodejs coverage report
        id: js-coverage-download
        uses: actions/download-artifact@v2
        with:
          name: js-coverage-${{ github.sha }}
          path: nextjs_frontend/coverage

      - name: LS download path
        run: |
          echo ${{ steps.py-coverage-download.outputs.download-path }}
          ls -lah ${{ steps.py-coverage-download.outputs.download-path }}
          echo ${{ steps.js-coverage-download.outputs.download-path }}
          ls -lah ${{ steps.js-coverage-download.outputs.download-path }}

      - name: (Debug) Show structure of files
        run: ls -R

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}